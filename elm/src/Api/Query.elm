-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (CompetitorsOptionalArguments, MarbleRequiredArguments, MarblesOptionalArguments, OccasionOptionalArguments, OccasionRequiredArguments, TeamRequiredArguments, competitors, events, marble, marbles, occasion, occasions, team, teams)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CompetitorsOptionalArguments =
    { event : OptionalArgument Api.ScalarCodecs.Id
    , marble : OptionalArgument Api.ScalarCodecs.Id
    }


competitors : (CompetitorsOptionalArguments -> CompetitorsOptionalArguments) -> SelectionSet decodesTo Api.Object.Competitor -> SelectionSet (List decodesTo) RootQuery
competitors fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { event = Absent, marble = Absent }

        optionalArgs =
            [ Argument.optional "event" filledInOptionals.event (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "marble" filledInOptionals.marble (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "competitors" optionalArgs object_ (identity >> Decode.list)


events : SelectionSet decodesTo Api.Object.Event -> SelectionSet (List decodesTo) RootQuery
events object_ =
    Object.selectionForCompositeField "events" [] object_ (identity >> Decode.list)


type alias MarbleRequiredArguments =
    { id : Api.ScalarCodecs.Id }


marble : MarbleRequiredArguments -> SelectionSet decodesTo Api.Object.Marble -> SelectionSet (Maybe decodesTo) RootQuery
marble requiredArgs object_ =
    Object.selectionForCompositeField "marble" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias MarblesOptionalArguments =
    { team : OptionalArgument Int }


marbles : (MarblesOptionalArguments -> MarblesOptionalArguments) -> SelectionSet decodesTo Api.Object.Marble -> SelectionSet (List decodesTo) RootQuery
marbles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { team = Absent }

        optionalArgs =
            [ Argument.optional "team" filledInOptionals.team Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "marbles" optionalArgs object_ (identity >> Decode.list)


type alias OccasionOptionalArguments =
    { event : OptionalArgument Api.ScalarCodecs.Id }


type alias OccasionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


occasion : (OccasionOptionalArguments -> OccasionOptionalArguments) -> OccasionRequiredArguments -> SelectionSet decodesTo Api.Object.Occasion -> SelectionSet (Maybe decodesTo) RootQuery
occasion fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { event = Absent }

        optionalArgs =
            [ Argument.optional "event" filledInOptionals.event (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "occasion" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


occasions : SelectionSet decodesTo Api.Object.Occasion -> SelectionSet (List decodesTo) RootQuery
occasions object_ =
    Object.selectionForCompositeField "occasions" [] object_ (identity >> Decode.list)


type alias TeamRequiredArguments =
    { id : Api.ScalarCodecs.Id }


team : TeamRequiredArguments -> SelectionSet decodesTo Api.Object.Team -> SelectionSet (Maybe decodesTo) RootQuery
team requiredArgs object_ =
    Object.selectionForCompositeField "team" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


teams : SelectionSet decodesTo Api.Object.Team -> SelectionSet (List decodesTo) RootQuery
teams object_ =
    Object.selectionForCompositeField "teams" [] object_ (identity >> Decode.list)
